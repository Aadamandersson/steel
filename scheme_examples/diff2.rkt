'(define Stack.pop (lambda (stack) (if (Stack? stack) void (begin (error! Stack.pop "method takes a value of" Stack "given" stack))) (define contents (Stack-lst stack)) (if (null? contents) (quote (#false (quote ()))) (list (car contents) (cdr contents)))))
'(define Stack.push (lambda (stack value) (if (Stack? stack) void (begin (error! Stack.push "method takes a value of" Stack "given" stack))) (define contents (Stack-lst stack)) (Stack (cons value contents))))
'(define test-stack (Stack (quote ())))
'(define pop-val-test (car (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack)))))))
'(define new-stack-test (car (cdr (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack))))))))
'pop-val-test
'new-stack-test
'((lambda (pop-val) ((lambda (new-stack) (begin (displayln "Hello world") (displayln pop-val) (displayln new-stack))) (if (null? (cdr (cdr (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack)))))))) (car (cdr (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack))))))) (cdr (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack))))))))) (car (Stack.pop ((lambda (##x) (Stack.push ##x 4)) ((lambda (##x) (Stack.push ##x 3)) ((lambda (##x) (Stack.push ##x 2)) ((lambda (##x) (Stack.push ##x 1)) test-stack)))))))
'((lambda (a) ((lambda (b) ((lambda (c) (begin (displayln a) (displayln b) (displayln c))) (if (null? (cdr (cdr (cdr (list 1 2 3 4 5 6 7 8 9 10))))) (car (cdr (cdr (list 1 2 3 4 5 6 7 8 9 10)))) (cdr (cdr (list 1 2 3 4 5 6 7 8 9 10)))))) (car (cdr (list 1 2 3 4 5 6 7 8 9 10))))) (car (list 1 2 3 4 5 6 7 8 9 10)))