------------- BEFORE --------------
(define push (lambda (element) (lambda (stack) (list (quote ()) (cons element stack)))))
(define pop (lambda () (lambda (stack) ((lambda (element new-stack) (list element new-stack)) (car stack) (cdr stack)))))
(define stack-of cadr)
(define value-of car)
(define >>= (lambda (stack-action continuation) (lambda (stack) ((lambda (result) ((continuation (value-of result)) (stack-of result))) (stack-action stack)))))
(define return (lambda (value) (lambda (stack) (list value stack))))
(define run-stack (lambda (computation stack) (computation stack)))
(define eval-stack (lambda (computation stack) (value-of (computation stack))))
(define exec-stack (lambda (computation stack) (stack-of (computation stack))))
(define computation-1 (>>= (push 4) (lambda (_) (>>= (push 5) (lambda (_) (>>= (pop) (lambda (a) (>>= (pop) (lambda (b) (return (list a b)))))))))))
(define computation-2 (>>= (push 2) (lambda (_) (>>= (push 3) (lambda (_) (>>= (pop) (lambda (a) (>>= (pop) (lambda (b) (return (list a b)))))))))))
(define main (lambda () ((lambda (initial-stack composed) (begin (display \"Result: \") (display (eval-stack composed initial-stack)) (newline))) (quote ()) (>>= computation-1 (lambda (a) (>>= computation-2 (lambda (b) (return (list a b)))))))))
(define test (lambda (x) (if (= x 10) x (begin (main) (test (+ x 1))))))
(test 0)
(define foo (lambda (x) (main) (bar x)))
(define bar (lambda (x) (main) (foo x)))
(define test-2 (lambda () (define foo (lambda () (main) (bar))) (define bar (lambda () (main) (foo))) (foo)))
(define test-3 (lambda () (define foo (lambda () (inspect-bytecode bar) (bar))) (define bar (lambda () (inspect-bytecode foo) (foo))) (foo)))
------------- AFTER --------------
(define push (lambda (element) (lambda (stack) (list (quote ()) (cons element stack)))))
(define pop (lambda () (lambda (stack) ((lambda (element new-stack) (list element new-stack)) (car stack) (cdr stack)))))
(define stack-of cadr)
(define value-of car)
(define >>= (lambda (stack-action continuation) (lambda (stack) ((lambda (result) ((continuation (value-of result)) (stack-of result))) (stack-action stack)))))
(define return (lambda (value) (lambda (stack) (list value stack))))
(define run-stack (lambda (computation stack) (computation stack)))
(define eval-stack (lambda (computation stack) (value-of (computation stack))))
(define exec-stack (lambda (computation stack) (stack-of (computation stack))))
(define computation-1 (>>= (push 4) (lambda (_) (>>= (push 5) (lambda (_) (>>= (pop) (lambda (a) (>>= (pop) (lambda (b) (return (list a b)))))))))))
(define computation-2 (>>= (push 2) (lambda (_) (>>= (push 3) (lambda (_) (>>= (pop) (lambda (a) (>>= (pop) (lambda (b) (return (list a b)))))))))))
(define main (lambda () ((lambda (initial-stack composed) (begin (display \"Result: \") (display (eval-stack composed initial-stack)) (newline))) (quote ()) (>>= computation-1 (lambda (a) (>>= computation-2 (lambda (b) (return (list a b)))))))))
(define test (lambda (x) (if (= x 10) x (begin (main) (test (+ x 1))))))
(test 0)
(define foo (lambda (x) (main) (bar x)))
(define bar (lambda (x) (main) (foo x)))
(define test-2 (lambda () (define foo (lambda () (main) (bar))) (define bar (lambda () (main) (foo))) (foo)))
(define test-3 (lambda () (define foo (lambda () (inspect-bytecode bar) (bar))) (define bar (lambda () (inspect-bytecode foo) (foo))) (foo)))
